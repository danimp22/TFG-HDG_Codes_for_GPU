import numpy as np

def fekete_nodes_1D(p, face_nodes):
    """
    Computes the Fekete nodes for 1D elements (0-indexed version).
    
    Parameters:
    p (int): Polynomial degree.
    face_nodes (array-like): Given face nodes (0-indexed).
    
    Returns:
    numpy.ndarray: Ordered Fekete nodes corresponding to face_nodes (0-indexed).
    """
    fekete_nodes_dict = {
        1: np.array([-1.0, 1.0]),
        2: np.array([-1.0, 0.0, 1.0]),
        3: np.array([-1.0, -0.4472135955, 0.4472135955, 1.0]),
        4: np.array([-1.0, -0.6546536707, 0.0, 0.6546536707, 1.0]),
        5: np.array([-1.0, -0.7650553239, -0.2852315165, 0.2852315165, 0.7650553239, 1.0]),
        6: np.array([-1.0, -0.8302238963, -0.4688487935, 0.0, 0.4688487935, 0.8302238963, 1.0]),
        7: np.array([-1.0, -0.8717401485, -0.5917001814, -0.2092992179, 0.2092992179, 0.5917001814, 0.8717401485, 1.0]),
        8: np.array([-1.0, -0.8997579954, -0.6771862795, -0.3631174638, 0.0, 0.3631174638, 0.6771862795, 0.8997579954, 1.0]),
        9: np.array([-1.0, -0.9195339082, -0.7387738651, -0.4779249498, -0.1652789577, 0.1652789577, 0.4779249498, 0.7387738651, 0.9195339082, 1.0]),
        10: np.array([-1.0, -0.9340014304, -0.7844834737, -0.565235327, -0.2957581356, 0.0, 0.2957581356, 0.565235327, 0.7844834737, 0.9340014304, 1.0]),
        11: np.array([-1.0, -0.9448993, -0.8192793, -0.6328762, -0.3995309, -0.1365529, 0.1365529, 0.3995309, 0.6328762, 0.8192793, 0.9448993, 1.0]),
        12: np.array([-1.0, -0.9533098, -0.8463476, -0.6861885, -0.4829098, -0.2492869, 0.0, 0.2492869, 0.4829098, 0.6861885, 0.8463476, 0.9533098, 1.0]),
        13: np.array([-1.0, -0.9599350, -0.8678011, -0.7288686, -0.5506394, -0.3427240, -0.1163319, 0.1163319, 0.3427240, 0.5506394, 0.7288686, 0.8678011, 0.9599350, 1.0]),
        14: np.array([-1.0, -0.9652459, -0.8850820, -0.7635197, -0.6062532, -0.4206381, -0.2153539, 0.0, 0.2153539, 0.4206381, 0.6062532, 0.7635197, 0.8850820, 0.9652459, 1.0])
    }

    if p not in fekete_nodes_dict:
        raise ValueError("Polynomial degree not implemented yet")

    fekete_nodes = fekete_nodes_dict[p]

    if len(fekete_nodes) != len(face_nodes):
        raise ValueError("Error computing Fekete nodes: face_nodes size mismatch")

    return fekete_nodes[np.array(face_nodes)]
