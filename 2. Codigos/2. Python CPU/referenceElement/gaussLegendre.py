import numpy as np

def gauss_legendre(N):
    """
    Equivalent to MATLAB's gaussLegendre(N), with consistent ordering:
    [0, +x1, +x2, ..., -x1, -x2, ...]
    """
    if N == 1:
        x = np.array([0.0])
        w = np.array([2.0])
    elif N == 2:
        x = np.array([-np.sqrt(3)/3, np.sqrt(3)/3])
        w = np.array([1.0, 1.0])
    elif N == 3:
        x = np.array([0.0, np.sqrt(15)/5, -np.sqrt(15)/5])
        w = np.array([8/9, 5/9, 5/9])
    elif N == 4:
        x = np.array([0.3399810435848563, 0.8611363115940526,
                      -0.3399810435848563, -0.8611363115940526])
        w = np.array([0.6521451548625461, 0.3478548451374538,
                      0.6521451548625461, 0.3478548451374538])
    elif N == 5:
        x = np.array([0.0, 0.5384693101056831, 0.906179845938664,
                      -0.5384693101056831, -0.906179845938664])
        w = np.array([0.5688888888888889, 0.4786286704993665, 0.2369268850561891,
                      0.4786286704993665, 0.2369268850561891])
    elif N == 6:
        x = np.array([0.932469514203152, 0.661209386466264, 0.238619186083197,
                     -0.238619186083197, -0.661209386466264, -0.932469514203152])
        w = np.array([0.171324492379170, 0.360761573048139, 0.467913934572691,
                      0.467913934572691, 0.360761573048139, 0.171324492379170])
    elif N == 7:
        x = np.array([0.949107912342758, 0.741531185599394, 0.405845151377397,
                      0.0, -0.405845151377397, -0.741531185599394, -0.949107912342758])
        w = np.array([0.129484966168870, 0.279705391489277, 0.381830050505119,
                      0.417959183673469, 0.381830050505119, 0.279705391489277, 0.129484966168870])
    elif N == 8:
        x = np.array([0.960289856497536, 0.796666477413627, 0.525532409916329,
                      0.183434642495650, -0.183434642495650, -0.525532409916329,
                      -0.796666477413627, -0.960289856497536])
        w = np.array([0.101228536290377, 0.222381034453374, 0.313706645877887,
                      0.362683783378362, 0.362683783378362, 0.313706645877887,
                      0.222381034453374, 0.101228536290377])
    elif N == 9:
        x = np.array([0.968160239507626, 0.836031107326636, 0.613371432700590,
                      0.324253423403809, 0.0, -0.324253423403809,
                      -0.613371432700590, -0.836031107326636, -0.968160239507626])
        w = np.array([0.081274388361575, 0.180648160694857, 0.260610696402936,
                      0.312347077040003, 0.330239355001260, 0.312347077040003,
                      0.260610696402936, 0.180648160694857, 0.081274388361575])
    elif N == 10:
        x = np.array([0.973906528517172, 0.865063366688985, 0.679409568299024,
                      0.433395394129247, 0.148874338981631, -0.148874338981631,
                      -0.433395394129247, -0.679409568299024, -0.865063366688985,
                      -0.973906528517172])
        w = np.array([0.066671344308688, 0.149451349150581, 0.219086362515982,
                      0.269266719309996, 0.295524224714753, 0.295524224714753,
                      0.269266719309996, 0.219086362515982, 0.149451349150581,
                      0.066671344308688])
    elif N == 100:
        x = np.array([0.978228658146057, 0.887062599768095, 0.730152005574049,
                      0.519096129206812, 0.269543155952345, 0.0, -0.269543155952345,
                      -0.519096129206812, -0.730152005574049, -0.887062599768095,
                      -0.978228658146057])
        w = np.array([0.055668567116174, 0.125580369464904, 0.186290210927734,
                      0.233193764591990, 0.262804544510247, 0.272925086777901,
                      0.262804544510247, 0.233193764591990, 0.186290210927734,
                      0.125580369464904, 0.055668567116174])
    else:
        N1 = N
        N2 = N + 1
        xu = np.linspace(-1, 1, N1)
        y = np.cos((2*np.arange(1, N1+1) - 1) * np.pi / (2*N1)) + \
            (0.27 / N1) * np.sin(np.pi * xu * N / N2)
        L = np.zeros((N1, N2))
        Lp = np.zeros(N1)
        y0 = 2 * np.ones_like(y)

        # Newton-Raphson iteration
        while np.max(np.abs(y - y0)) > np.finfo(float).eps:
            L[:, 0] = 1
            L[:, 1] = y
            for k in range(1, N1):
                L[:, k+1] = ((2*k + 1) * y * L[:, k] - k * L[:, k-1]) / (k + 1)
            Lp = N2 * (L[:, N1 - 1] - y * L[:, N1]) / (1 - y**2)
            y0 = y
            y = y0 - L[:, N1] / Lp

        x = y
        w = 2 / ((1 - x**2) * (Lp**2))

        # No sorting necessary â€” use raw Newton-Raphson output
        # If desired, reorder to match MATLAB: center, +, -
        x = x[np.argsort(np.abs(x))]
        w = w[np.argsort(np.abs(x))]

    return x, w

