import numpy as np

def gauss_legendre(N):
    """
    Computes the Gauss-Legendre quadrature nodes (x) and weights (w)
    on the interval [-1, 1] for a given order N.

    For N <= 10, uses tabulated high-precision values (like in MATLAB).
    For N > 10, computes them numerically using Newton-Raphson iteration.
    """

    # Tabulated values (high-precision)
    tabulated = {
        1: (np.array([0.0]),
            np.array([2.0])),

        2: (np.array([-np.sqrt(3)/3, np.sqrt(3)/3]),
            np.array([1.0, 1.0])),

        3: (np.array([-np.sqrt(15)/5, np.sqrt(15)/5, 0.0]),
            np.array([5/9, 5/9, 8/9])),

        4: (np.array([
            -0.8611363115940526,
            -0.3399810435848563,
             0.3399810435848563,
             0.8611363115940526]),
            np.array([
             0.3478548451374538,
             0.6521451548625461,
             0.6521451548625461,
             0.3478548451374538])),

        5: (np.array([
            -0.9061798459386640,
            -0.5384693101056831,
             0.0,
             0.5384693101056831,
             0.9061798459386640]),
            np.array([
             0.2369268850561891,
             0.4786286704993665,
             0.5688888888888889,
             0.4786286704993665,
             0.2369268850561891])),

        6: (np.array([
            -0.9324695142031521,
            -0.6612093864662645,
            -0.2386191860831969,
             0.2386191860831969,
             0.6612093864662645,
             0.9324695142031521]),
            np.array([
             0.1713244923791704,
             0.3607615730481386,
             0.4679139345726910,
             0.4679139345726910,
             0.3607615730481386,
             0.1713244923791704])),

        7: (np.array([
            -0.9491079123427585,
            -0.7415311855993945,
            -0.4058451513773972,
             0.0,
             0.4058451513773972,
             0.7415311855993945,
             0.9491079123427585]),
            np.array([
             0.1294849661688697,
             0.2797053914892766,
             0.3818300505051189,
             0.4179591836734694,
             0.3818300505051189,
             0.2797053914892766,
             0.1294849661688697])),

        8: (np.array([
            -0.9602898564975363,
            -0.7966664774136267,
            -0.5255324099163290,
            -0.1834346424956498,
             0.1834346424956498,
             0.5255324099163290,
             0.7966664774136267,
             0.9602898564975363]),
            np.array([
             0.1012285362903763,
             0.2223810344533745,
             0.3137066458778873,
             0.3626837833783620,
             0.3626837833783620,
             0.3137066458778873,
             0.2223810344533745,
             0.1012285362903763])),

        9: (np.array([
            -0.9681602395076261,
            -0.8360311073266358,
            -0.6133714327005904,
            -0.3242534234038089,
             0.0,
             0.3242534234038089,
             0.6133714327005904,
             0.8360311073266358,
             0.9681602395076261]),
            np.array([
             0.0812743883615744,
             0.1806481606948574,
             0.2606106964029354,
             0.3123470770400029,
             0.3302393550012598,
             0.3123470770400029,
             0.2606106964029354,
             0.1806481606948574,
             0.0812743883615744])),

        10: (np.array([
            -0.9739065285171717,
            -0.8650633666889845,
            -0.6794095682990244,
            -0.4333953941292472,
            -0.1488743389816312,
             0.1488743389816312,
             0.4333953941292472,
             0.6794095682990244,
             0.8650633666889845,
             0.9739065285171717]),
             np.array([
             0.0666713443086881,
             0.1494513491505806,
             0.2190863625159820,
             0.2692667193099963,
             0.2955242247147529,
             0.2955242247147529,
             0.2692667193099963,
             0.2190863625159820,
             0.1494513491505806,
             0.0666713443086881]))
    }

    if N in tabulated:
        return tabulated[N]

    # Fallback for N > 10: Newton-Raphson method
    N1 = N
    N2 = N + 1
    xu = np.linspace(-1, 1, N1)
    y = np.cos((2*np.arange(1, N1+1) - 1) * np.pi / (2*N1)) + \
        (0.27 / N1) * np.sin(np.pi * xu * N / N2)

    L = np.zeros((N1, N2))
    Lp = np.zeros((N1, N2))
    y0 = 2 * np.ones_like(y)

    while np.max(np.abs(y - y0)) > np.finfo(float).eps:
        L[:, 0] = 1
        L[:, 1] = y
        for k in range(1, N1):
            L[:, k+1] = ((2*k + 1) * y * L[:, k] - k * L[:, k-1]) / (k + 1)
        Lp = N2 * (L[:, N1 - 1] - y * L[:, N1]) / (1 - y**2)
        y0 = y
        y = y0 - L[:, N1] / Lp

    x = y
    w = 2 / ((1 - x**2) * (Lp**2))

    return x, w
