import numpy as np

def orthogonal_polynomials_tri(degree, Xi):
    """
    Evaluates orthogonal polynomials on the reference triangle for a given degree (1 to 5).

    Parameters
    ----------
    degree : int
        Degree of the polynomial basis.
    Xi : ndarray
        Evaluation points, shape (nPoints, 2), with columns [u, v].

    Returns
    -------
    P : ndarray
        Evaluated orthogonal polynomials at Xi, shape (nPoints, nBasis).
    """
    u = Xi[:, 0]
    v = Xi[:, 1]
    U = np.ones_like(u)

    if degree == 1:
        P = np.column_stack([
            U,
            0.5 + 1.5 * v,
            0.5 + u + 0.5 * v
        ])
    elif degree == 2:
        P = np.column_stack([
            U,
            0.5 + 1.5 * v,
            -0.5 + v + 2.5 * v**2,
            0.5 + u + 0.5 * v,
            (1.5 + 2.5 * v) * u + 0.75 + 1.25 * v**2 + 2 * v,
            1.5 * u**2 + (1.5 * v + 1.5) * u + 0.25 * v**2 + v + 0.25
        ])
    elif degree == 3:
        P = np.column_stack([
            U,
            0.5 + 1.5 * v,
            -0.5 + v + 2.5 * v**2,
            -0.375 - 1.875 * v + 1.875 * v**2 + 4.375 * v**3,
            0.5 + u + 0.5 * v,
            (1.5 + 2.5 * v) * u + 0.75 + 1.25 * v**2 + 2 * v,
            (0.25 + 4.5 * v + 5.25 * v**2) * u + 0.125 + 2.625 * v**3 + 4.875 * v**2 + 2.375 * v,
            1.5 * u**2 + (1.5 * v + 1.5) * u + 0.25 * v**2 + v + 0.25,
            (3.75 + 5.25 * v) * u**2 + (3.75 + 5.25 * v**2 + 9 * v) * u +
                0.625 + 0.875 * v**3 + 4.125 * v**2 + 3.375 * v,
            2.5 * u**3 + (3.75 * v + 3.75) * u**2 +
                (1.5 * v**2 + 4.5 * v + 1.5) * u +
                0.125 * v**3 + 1.125 * v**2 + 1.125 * v + 0.125
        ])
    elif degree == 4:
        P = np.column_stack([
            U,
            0.5 + 1.5 * v,
            -0.5 + v + 2.5 * v**2,
            -0.375 - 1.875 * v + 1.875 * v**2 + 4.375 * v**3,
            0.375 - 1.5 * v - 5.25 * v**2 + 3.5 * v**3 + 7.875 * v**4,
            0.5 + u + 0.5 * v,
            (1.5 + 2.5 * v) * u + 0.75 + 1.25 * v**2 + 2 * v,
            (0.25 + 4.5 * v + 5.25 * v**2) * u + 0.125 + 2.625 * v**3 + 4.875 * v**2 + 2.375 * v,
            (-1 + 10.5 * v**2 + 10.5 * v**3) * u - 0.5 + 5.25 * v**4 + 10.5 * v**3 + 5.25 * v**2 - 0.5 * v,
            1.5 * u**2 + (1.5 * v + 1.5) * u + 0.25 * v**2 + v + 0.25,
            (3.75 + 5.25 * v) * u**2 + (3.75 + 5.25 * v**2 + 9 * v) * u +
                0.625 + 0.875 * v**3 + 4.125 * v**2 + 3.375 * v,
            (13.5 * v**2 + 15 * v + 3) * u**2 +
                (3 + 13.5 * v**3 + 28.5 * v**2 + 18 * v) * u +
                0.5 + 2.25 * v**4 + 11.5 * v**3 + 12.75 * v**2 + 4.5 * v,
            2.5 * u**3 + (3.75 * v + 3.75) * u**2 +
                (1.5 * v**2 + 4.5 * v + 1.5) * u +
                0.125 * v**3 + 1.125 * v**2 + 1.125 * v + 0.125,
            (8.75 + 11.25 * v) * u**3 + (13.125 + 16.875 * v**2 + 30 * v) * u**2 +
                (5.25 + 6.75 * v**3 + 25.5 * v**2 + 22.5 * v) * u +
                0.4375 + 0.5625 * v**4 + 5.5 * v**3 + 9 * v**2 + 4.5 * v,
            4.375 * u**4 + (8.75 * v + 8.75) * u**3 +
                (5.625 * v**2 + 15 * v + 5.625) * u**2 +
                (1.25 * v**3 + 7.5 * v**2 + 7.5 * v + 1.25) * u +
                0.0625 * v**4 + v**3 + 2.25 * v**2 + v + 0.0625
        ])
    elif degree == 5:
        P = np.column_stack([
            U,
            0.5 + 1.5 * v,
            -0.5 + v + 2.5 * v**2,
            -3/8 - 15/8 * v + 15/8 * v**2 + 35/8 * v**3,
            3/8 - 1.5 * v - 21/4 * v**2 + 3.5 * v**3 + 63/8 * v**4,
            5/16 + 35/16 * v - 35/8 * v**2 - 105/8 * v**3 + 105/16 * v**4 + 231/16 * v**5,
            0.5 + u + 0.5 * v,
            (1.5 + 2.5 * v) * u + 0.75 + 1.25 * v**2 + 2 * v,
            (0.25 + 4.5 * v + 5.25 * v**2) * u + 0.125 + 2.625 * v**3 + 4.875 * v**2 + 2.375 * v,
            (-1 + 10.5 * v**2 + 10.5 * v**3) * u - 0.5 + 5.25 * v**4 + 10.5 * v**3 + 5.25 * v**2 - 0.5 * v,
            (-3/8 - 11/2 * v - 9/4 * v**2 + 45/2 * v**3 + 165/8 * v**4) * u
                - 3/16 + 165/16 * v**5 + 345/16 * v**4 + 81/8 * v**3 - 31/8 * v**2 - 47/16 * v,
            1.5 * u**2 + (1.5 * v + 1.5) * u + 0.25 * v**2 + v + 0.25,
            (15/4 + 21/4 * v) * u**2 + (15/4 + 21/4 * v**2 + 9 * v) * u + 5/8 + 7/8 * v**3 + 33/8 * v**2 + 27/8 * v,
            (27/2 * v**2 + 15 * v + 3) * u**2 + (3 + 27/2 * v**3 + 57/2 * v**2 + 18 * v) * u
                + 0.5 + 9/4 * v**4 + 23/2 * v**3 + 51/4 * v**2 + 9/2 * v,
            (495/16 * v**3 + 675/16 * v**2 + 189/16 * v - 15/16) * u**2
                + (-15/16 + 495/16 * v**4 + 585/8 * v**3 + 54 * v**2 + 87/8 * v) * u
                - 5/32 + 165/32 * v**5 + 885/32 * v**4 + 141/4 * v**3 + 59/4 * v**2 + 43/32 * v,
            2.5 * u**3 + (15/4 * v + 15/4) * u**2 + (1.5 * v**2 + 4.5 * v + 1.5) * u
                + 0.125 * v**3 + 1.125 * v**2 + 1.125 * v + 0.125,
            (35/4 + 45/4 * v) * u**3 + (105/8 + 135/8 * v**2 + 30 * v) * u**2
                + (21/4 + 27/4 * v**3 + 51/2 * v**2 + 45/2 * v) * u
                + 7/16 + 9/16 * v**4 + 11/2 * v**3 + 9 * v**2 + 9/2 * v,
            (275/8 * v**2 + 175/4 * v + 95/8) * u**3
                + (285/16 + 825/16 * v**3 + 1875/16 * v**2 + 1335/16 * v) * u**2
                + (57/8 + 165/8 * v**4 + 705/8 * v**3 + 213/2 * v**2 + 381/8 * v) * u
                + 19/32 + 55/32 * v**5 + 565/32 * v**4 + 143/4 * v**3 + 107/4 * v**2 + 241/32 * v,
            (35/8) * u**4 + (35/4 * v + 35/4) * u**3 + (45/8 * v**2 + 15 * v + 45/8) * u**2
                + (5/4 * v**3 + 15/2 * v**2 + 15/2 * v + 5/4) * u
                + 1/16 * v**4 + v**3 + 9/4 * v**2 + v + 1/16,
            (315/16 + 385/16 * v) * u**4 + (315/8 + 385/8 * v**2 + 175/2 * v) * u**3
                + (405/16 + 495/16 * v**3 + 1725/16 * v**2 + 1575/16 * v) * u**2
                + (45/8 + 55/8 * v**4 + 375/8 * v**3 + 75 * v**2 + 325/8 * v) * u
                + 9/32 + 11/32 * v**5 + 185/32 * v**4 + 135/8 * v**3 + 125/8 * v**2 + 155/32 * v,
            (63/8) * u**5 + (315/16 * v + 315/16) * u**4 + (35/2 * v**2 + 175/4 * v + 35/2) * u**3
                + (105/16 * v**3 + 525/16 * v**2 + 525/16 * v + 105/16) * u**2
                + (15/16 * v**4 + 75/8 * v**3 + 75/4 * v**2 + 75/8 * v + 15/16) * u
                + 1/32 * v**5 + 25/32 * v**4 + 25/8 * v**3 + 25/8 * v**2 + 25/32 * v + 1/32
        ])

    else:
        raise ValueError("Degree not implemented in orthogonal_polynomials_tri.")

    return P

